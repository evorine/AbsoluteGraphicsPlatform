//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\DssParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AbsoluteGraphicsPlatform.AGPx.Internal {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class DssParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NULL=1, NONE=2, UNIT=3, AND=4, OR=5, INTERPOLATION_START=6, BEGIN_PARENTHESIS=7, 
		END_PARENTHESIS=8, BEGIN_BRACE=9, END_BRACE=10, BEGIN_BRACKET=11, END_BRACKET=12, 
		LESSER_EQUAL_THAN=13, LESSER_THAN=14, GREATER_EQUAL_THAN=15, GREATER_THAN=16, 
		TILDE=17, COLON=18, SEMICOLON=19, COMMA=20, DOT=21, DOLLAR=22, AT=23, 
		AMPERSAND=24, HASH=25, THREE_DOT=26, PLUS=27, TIMES=28, DIVIDE=29, MINUS=30, 
		PERCENT=31, DOUBLE_EQUAL=32, NOT_EQUAL=33, EQUAL=34, MIXIN=35, FUNCTION=36, 
		ELSE=37, IF=38, FOR=39, WHILE=40, EACH=41, INCLUDE=42, IMPORT=43, RETURN=44, 
		POUND_DEFAULT=45, IDENTIFIER=46, STRING_LITERAL=47, NUMBER=48, HEXADECIMAL=49, 
		WS=50, LINE_COMMENT=51, BLOCK_COMMENT=52, SPACE=53, INTERPOLATION_START_AFTER=54, 
		IDENTIFIER_AFTER=55;
	public const int
		RULE_stylesheet = 0, RULE_statement = 1, RULE_ruleset = 2, RULE_block = 3, 
		RULE_selector = 4, RULE_selectorPart = 5, RULE_identifier = 6, RULE_propertyStatement = 7, 
		RULE_propertyKey = 8, RULE_propertyValue = 9, RULE_asignmentStatement = 10, 
		RULE_expression = 11, RULE_literal = 12, RULE_list = 13, RULE_listRanged = 14, 
		RULE_listWithValues = 15, RULE_color = 16, RULE_variable = 17;
	public static readonly string[] ruleNames = {
		"stylesheet", "statement", "ruleset", "block", "selector", "selectorPart", 
		"identifier", "propertyStatement", "propertyKey", "propertyValue", "asignmentStatement", 
		"expression", "literal", "list", "listRanged", "listWithValues", "color", 
		"variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'none'", null, "'&&'", "'||'", null, "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "'<='", "'<'", "'>='", "'>'", "'~'", "':'", "';'", 
		"','", "'.'", "'$'", "'@'", "'&'", "'#'", "'...'", "'+'", "'*'", "'/'", 
		"'-'", "'%'", "'=='", "'!='", "'='", "'@mixin'", "'@function'", "'@else'", 
		"'@if'", "'@for'", "'@while'", "'@each'", "'@include'", "'@import'", "'@return'", 
		"'!default'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NULL", "NONE", "UNIT", "AND", "OR", "INTERPOLATION_START", "BEGIN_PARENTHESIS", 
		"END_PARENTHESIS", "BEGIN_BRACE", "END_BRACE", "BEGIN_BRACKET", "END_BRACKET", 
		"LESSER_EQUAL_THAN", "LESSER_THAN", "GREATER_EQUAL_THAN", "GREATER_THAN", 
		"TILDE", "COLON", "SEMICOLON", "COMMA", "DOT", "DOLLAR", "AT", "AMPERSAND", 
		"HASH", "THREE_DOT", "PLUS", "TIMES", "DIVIDE", "MINUS", "PERCENT", "DOUBLE_EQUAL", 
		"NOT_EQUAL", "EQUAL", "MIXIN", "FUNCTION", "ELSE", "IF", "FOR", "WHILE", 
		"EACH", "INCLUDE", "IMPORT", "RETURN", "POUND_DEFAULT", "IDENTIFIER", 
		"STRING_LITERAL", "NUMBER", "HEXADECIMAL", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"SPACE", "INTERPOLATION_START_AFTER", "IDENTIFIER_AFTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DssParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DssParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DssParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DssParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StylesheetContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StylesheetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stylesheet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterStylesheet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitStylesheet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStylesheet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StylesheetContext stylesheet() {
		StylesheetContext _localctx = new StylesheetContext(Context, State);
		EnterRule(_localctx, 0, RULE_stylesheet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOT) | (1L << DOLLAR) | (1L << HASH) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 36; statement();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public RulesetContext ruleset() {
			return GetRuleContext<RulesetContext>(0);
		}
		public PropertyStatementContext propertyStatement() {
			return GetRuleContext<PropertyStatementContext>(0);
		}
		public AsignmentStatementContext asignmentStatement() {
			return GetRuleContext<AsignmentStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; ruleset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; propertyStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44; asignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetContext : ParserRuleContext {
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RulesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterRuleset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitRuleset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetContext ruleset() {
		RulesetContext _localctx = new RulesetContext(Context, State);
		EnterRule(_localctx, 4, RULE_ruleset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; selector();
			State = 48; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(BEGIN_BRACE);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOT) | (1L << DOLLAR) | (1L << HASH) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 51; statement();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57; Match(END_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorPartContext selectorPart() {
			return GetRuleContext<SelectorPartContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 8, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; selectorPart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorPartContext : ParserRuleContext {
		public IdentifierContext COMPONENT;
		public IdentifierContext NAME;
		public IdentifierContext CLASS;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(DssParser.HASH, 0); }
		public ITerminalNode DOT() { return GetToken(DssParser.DOT, 0); }
		public SelectorPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterSelectorPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitSelectorPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorPartContext selectorPart() {
		SelectorPartContext _localctx = new SelectorPartContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectorPart);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; _localctx.COMPONENT = identifier();
				}
				break;
			case HASH:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 62; Match(HASH);
				State = 63; _localctx.NAME = identifier();
				}
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 64; Match(DOT);
				State = 65; _localctx.CLASS = identifier();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DssParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyStatementContext : ParserRuleContext {
		public PropertyKeyContext propertyKey() {
			return GetRuleContext<PropertyKeyContext>(0);
		}
		public PropertyValueContext propertyValue() {
			return GetRuleContext<PropertyValueContext>(0);
		}
		public PropertyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterPropertyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitPropertyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyStatementContext propertyStatement() {
		PropertyStatementContext _localctx = new PropertyStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_propertyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; propertyKey();
			State = 71; Match(COLON);
			State = 72; propertyValue();
			State = 73; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyKeyContext : ParserRuleContext {
		public IdentifierContext SUBKEY;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public PropertyKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyKey; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterPropertyKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitPropertyKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyKeyContext propertyKey() {
		PropertyKeyContext _localctx = new PropertyKeyContext(Context, State);
		EnterRule(_localctx, 16, RULE_propertyKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; identifier();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 76; Match(DOT);
				State = 77; _localctx.SUBKEY = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyValueContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterPropertyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitPropertyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyValueContext propertyValue() {
		PropertyValueContext _localctx = new PropertyValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_propertyValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 80; expression(0);
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << NONE) | (1L << BEGIN_PARENTHESIS) | (1L << BEGIN_BRACE) | (1L << DOLLAR) | (1L << HASH) | (1L << IDENTIFIER) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignmentStatementContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public PropertyValueContext propertyValue() {
			return GetRuleContext<PropertyValueContext>(0);
		}
		public AsignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterAsignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitAsignmentStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignmentStatementContext asignmentStatement() {
		AsignmentStatementContext _localctx = new AsignmentStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_asignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; variable();
			State = 86; Match(COLON);
			State = 87; propertyValue();
			State = 88; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext LEFT;
		public IToken OP;
		public ExpressionContext RIGHT;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_PARENTHESIS:
				{
				State = 91; Match(BEGIN_PARENTHESIS);
				State = 92; expression(0);
				State = 93; Match(END_PARENTHESIS);
				}
				break;
			case NULL:
			case NONE:
			case BEGIN_BRACE:
			case HASH:
			case IDENTIFIER:
			case NUMBER:
				{
				State = 95; literal();
				}
				break;
			case DOLLAR:
				{
				State = 96; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 111;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.LEFT = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 99;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 100;
						_localctx.OP = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << DIVIDE) | (1L << PERCENT))) != 0)) ) {
							_localctx.OP = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 101; _localctx.RIGHT = expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.LEFT = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 102;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 103;
						_localctx.OP = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.OP = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 104; _localctx.RIGHT = expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.LEFT = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 105;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 106;
						_localctx.OP = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESSER_EQUAL_THAN) | (1L << LESSER_THAN) | (1L << GREATER_EQUAL_THAN) | (1L << GREATER_THAN))) != 0)) ) {
							_localctx.OP = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 107; _localctx.RIGHT = expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.LEFT = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 108;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 109;
						_localctx.OP = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DOUBLE_EQUAL || _la==NOT_EQUAL) ) {
							_localctx.OP = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 110; _localctx.RIGHT = expression(4);
						}
						break;
					}
					} 
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IToken OTHER;
		public ITerminalNode NUMBER() { return GetToken(DssParser.NUMBER, 0); }
		public ITerminalNode UNIT() { return GetToken(DssParser.UNIT, 0); }
		public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(DssParser.NULL, 0); }
		public ITerminalNode NONE() { return GetToken(DssParser.NONE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DssParser.IDENTIFIER, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; Match(NUMBER);
				State = 117; Match(UNIT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119; color();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 120; list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 121; Match(NULL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 122; Match(NONE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 123; _localctx.OTHER = Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListRangedContext listRanged() {
			return GetRuleContext<ListRangedContext>(0);
		}
		public ListWithValuesContext listWithValues() {
			return GetRuleContext<ListWithValuesContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 26, RULE_list);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126; listRanged();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; listWithValues();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListRangedContext : ParserRuleContext {
		public IToken FROM;
		public IToken TO;
		public ITerminalNode[] NUMBER() { return GetTokens(DssParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(DssParser.NUMBER, i);
		}
		public ListRangedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listRanged; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterListRanged(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitListRanged(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListRanged(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListRangedContext listRanged() {
		ListRangedContext _localctx = new ListRangedContext(Context, State);
		EnterRule(_localctx, 28, RULE_listRanged);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(BEGIN_BRACE);
			State = 131; _localctx.FROM = Match(NUMBER);
			State = 132; Match(THREE_DOT);
			State = 133; _localctx.TO = Match(NUMBER);
			State = 134; Match(END_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListWithValuesContext : ParserRuleContext {
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ListWithValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listWithValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterListWithValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitListWithValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListWithValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListWithValuesContext listWithValues() {
		ListWithValuesContext _localctx = new ListWithValuesContext(Context, State);
		EnterRule(_localctx, 30, RULE_listWithValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(BEGIN_BRACE);
			State = 137; literal();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 138; Match(COMMA);
				State = 139; literal();
				}
			}

			State = 142; Match(END_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		public ITerminalNode[] HEXADECIMAL() { return GetTokens(DssParser.HEXADECIMAL); }
		public ITerminalNode HEXADECIMAL(int i) {
			return GetToken(DssParser.HEXADECIMAL, i);
		}
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterColor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitColor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 32, RULE_color);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(HASH);
			State = 145; Match(HEXADECIMAL);
			State = 146; Match(HEXADECIMAL);
			State = 147; Match(HEXADECIMAL);
			State = 148; Match(HEXADECIMAL);
			State = 149; Match(HEXADECIMAL);
			State = 150; Match(HEXADECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DssParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDssParserListener typedListener = listener as IDssParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDssParserVisitor<TResult> typedVisitor = visitor as IDssParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 34, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(DOLLAR);
			State = 153; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x9E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\a', '\x2', '(', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '+', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x30', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x37', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', ':', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x45', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', 'Q', '\n', '\n', '\x3', '\v', '\x6', 
		'\v', 'T', '\n', '\v', '\r', '\v', '\xE', '\v', 'U', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x64', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 'r', '\n', '\r', '\f', 
		'\r', '\xE', '\r', 'u', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x7F', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x83', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x8F', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x2', '\x3', 
		'\x18', '\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'\x2', '\x6', '\x4', '\x2', '\x1E', '\x1F', '!', '!', '\x4', '\x2', '\x1D', 
		'\x1D', ' ', ' ', '\x3', '\x2', '\xF', '\x12', '\x3', '\x2', '\"', '#', 
		'\x2', '\xA1', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x4', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x31', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x44', '\x3', '\x2', '\x2', '\x2', '\xE', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'H', '\x3', '\x2', '\x2', '\x2', '\x12', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'S', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x18', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '~', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x84', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\"', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x9A', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', '\x4', 
		'\x3', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', 
		'\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x3', '\x3', '\x2', '\x2', '\x2', '+', 
		')', '\x3', '\x2', '\x2', '\x2', ',', '\x30', '\x5', '\x6', '\x4', '\x2', 
		'-', '\x30', '\x5', '\x10', '\t', '\x2', '.', '\x30', '\x5', '\x16', '\f', 
		'\x2', '/', ',', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\x5', '\n', '\x6', '\x2', '\x32', '\x33', 
		'\x5', '\b', '\x5', '\x2', '\x33', '\a', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x38', '\a', '\v', '\x2', '\x2', '\x35', '\x37', '\x5', '\x4', '\x3', 
		'\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\f', 
		'\x2', '\x2', '<', '\t', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x5', 
		'\f', '\a', '\x2', '>', '\v', '\x3', '\x2', '\x2', '\x2', '?', '\x45', 
		'\x5', '\xE', '\b', '\x2', '@', '\x41', '\a', '\x1B', '\x2', '\x2', '\x41', 
		'\x45', '\x5', '\xE', '\b', '\x2', '\x42', '\x43', '\a', '\x17', '\x2', 
		'\x2', '\x43', '\x45', '\x5', '\xE', '\b', '\x2', '\x44', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '@', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\a', '\x30', '\x2', '\x2', 'G', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x5', '\x12', '\n', '\x2', 'I', 'J', '\a', '\x14', 
		'\x2', '\x2', 'J', 'K', '\x5', '\x14', '\v', '\x2', 'K', 'L', '\a', '\x15', 
		'\x2', '\x2', 'L', '\x11', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x5', 
		'\xE', '\b', '\x2', 'N', 'O', '\a', '\x17', '\x2', '\x2', 'O', 'Q', '\x5', 
		'\xE', '\b', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'Q', '\x13', '\x3', '\x2', '\x2', '\x2', 'R', 'T', 
		'\x5', '\x18', '\r', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 
		'U', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x5', '$', '\x13', '\x2', 'X', 'Y', '\a', '\x14', '\x2', 
		'\x2', 'Y', 'Z', '\x5', '\x14', '\v', '\x2', 'Z', '[', '\a', '\x15', '\x2', 
		'\x2', '[', '\x17', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\b', '\r', 
		'\x1', '\x2', ']', '^', '\a', '\t', '\x2', '\x2', '^', '_', '\x5', '\x18', 
		'\r', '\x2', '_', '`', '\a', '\n', '\x2', '\x2', '`', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x64', '\x5', '\x1A', '\xE', '\x2', '\x62', '\x64', 
		'\x5', '$', '\x13', '\x2', '\x63', '\\', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 's', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\f', 
		'\b', '\x2', '\x2', '\x66', 'g', '\t', '\x2', '\x2', '\x2', 'g', 'r', 
		'\x5', '\x18', '\r', '\t', 'h', 'i', '\f', '\a', '\x2', '\x2', 'i', 'j', 
		'\t', '\x3', '\x2', '\x2', 'j', 'r', '\x5', '\x18', '\r', '\b', 'k', 'l', 
		'\f', '\x6', '\x2', '\x2', 'l', 'm', '\t', '\x4', '\x2', '\x2', 'm', 'r', 
		'\x5', '\x18', '\r', '\a', 'n', 'o', '\f', '\x5', '\x2', '\x2', 'o', 'p', 
		'\t', '\x5', '\x2', '\x2', 'p', 'r', '\x5', '\x18', '\r', '\x6', 'q', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'q', 'h', '\x3', '\x2', '\x2', '\x2', 
		'q', 'k', '\x3', '\x2', '\x2', '\x2', 'q', 'n', '\x3', '\x2', '\x2', '\x2', 
		'r', 'u', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', '\x19', '\x3', '\x2', '\x2', 
		'\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x32', '\x2', 
		'\x2', 'w', '\x7F', '\a', '\x5', '\x2', '\x2', 'x', '\x7F', '\a', '\x32', 
		'\x2', '\x2', 'y', '\x7F', '\x5', '\"', '\x12', '\x2', 'z', '\x7F', '\x5', 
		'\x1C', '\xF', '\x2', '{', '\x7F', '\a', '\x3', '\x2', '\x2', '|', '\x7F', 
		'\a', '\x4', '\x2', '\x2', '}', '\x7F', '\a', '\x30', '\x2', '\x2', '~', 
		'v', '\x3', '\x2', '\x2', '\x2', '~', 'x', '\x3', '\x2', '\x2', '\x2', 
		'~', 'y', '\x3', '\x2', '\x2', '\x2', '~', 'z', '\x3', '\x2', '\x2', '\x2', 
		'~', '{', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', 
		'~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x83', '\x5', '\x1E', '\x10', '\x2', '\x81', '\x83', '\x5', 
		' ', '\x11', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\a', '\v', '\x2', '\x2', '\x85', '\x86', '\a', 
		'\x32', '\x2', '\x2', '\x86', '\x87', '\a', '\x1C', '\x2', '\x2', '\x87', 
		'\x88', '\a', '\x32', '\x2', '\x2', '\x88', '\x89', '\a', '\f', '\x2', 
		'\x2', '\x89', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', 
		'\v', '\x2', '\x2', '\x8B', '\x8E', '\x5', '\x1A', '\xE', '\x2', '\x8C', 
		'\x8D', '\a', '\x16', '\x2', '\x2', '\x8D', '\x8F', '\x5', '\x1A', '\xE', 
		'\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\a', '\f', '\x2', '\x2', '\x91', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x93', '\a', '\x1B', '\x2', '\x2', '\x93', '\x94', '\a', '\x33', 
		'\x2', '\x2', '\x94', '\x95', '\a', '\x33', '\x2', '\x2', '\x95', '\x96', 
		'\a', '\x33', '\x2', '\x2', '\x96', '\x97', '\a', '\x33', '\x2', '\x2', 
		'\x97', '\x98', '\a', '\x33', '\x2', '\x2', '\x98', '\x99', '\a', '\x33', 
		'\x2', '\x2', '\x99', '#', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', 
		'\a', '\x18', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x30', '\x2', '\x2', 
		'\x9C', '%', '\x3', '\x2', '\x2', '\x2', '\xE', ')', '/', '\x38', '\x44', 
		'P', 'U', '\x63', 'q', 's', '~', '\x82', '\x8E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AbsoluteGraphicsPlatform.AGPx.Internal
