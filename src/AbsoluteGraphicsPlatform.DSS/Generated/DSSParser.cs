//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\DSSParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AbsoluteGraphicsPlatform.DSS {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class DSSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NULL=1, NONE=2, UNIT_LENGTH=3, UNIT_SECOND=4, AND=5, OR=6, INTERPOLATION_START=7, 
		BEGIN_PARENTHESIS=8, END_PARENTHESIS=9, BEGIN_BRACE=10, END_BRACE=11, 
		BEGIN_BRACKET=12, END_BRACKET=13, LESSER_EQUAL_THAN=14, LESSER_THAN=15, 
		GREATER_EQUAL_THAN=16, GREATER_THAN=17, TILDE=18, COLON=19, SEMICOLON=20, 
		COMMA=21, DOT=22, DOLLAR=23, AT=24, AMPERSAND=25, HASH=26, PLUS=27, TIMES=28, 
		DIVIDE=29, MINUS=30, PERCENT=31, DOUBLE_EQUAL=32, NOT_EQUAL=33, EQUAL=34, 
		MIXIN=35, FUNCTION=36, ELSE=37, IF=38, FOR=39, WHILE=40, EACH=41, INCLUDE=42, 
		IMPORT=43, RETURN=44, POUND_DEFAULT=45, IDENTIFIER=46, STRING_LITERAL=47, 
		NUMBER=48, COLOR=49, WS=50, LINE_COMMENT=51, BLOCK_COMMENT=52, SPACE=53, 
		INTERPOLATION_START_AFTER=54, IDENTIFIER_AFTER=55;
	public const int
		RULE_stylesheet = 0, RULE_statement = 1, RULE_ruleset = 2, RULE_block = 3, 
		RULE_selector = 4, RULE_selectorPart = 5, RULE_identifier = 6, RULE_propertyStatement = 7, 
		RULE_expression = 8, RULE_literal = 9, RULE_variable = 10;
	public static readonly string[] ruleNames = {
		"stylesheet", "statement", "ruleset", "block", "selector", "selectorPart", 
		"identifier", "propertyStatement", "expression", "literal", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'none'", null, "'s'", "'&&'", "'||'", null, "'('", "')'", 
		"'{'", "'}'", "'['", "']'", "'<='", "'<'", "'>='", "'>'", "'~'", "':'", 
		"';'", "','", "'.'", "'$'", "'@'", "'&'", "'#'", "'+'", "'*'", "'/'", 
		"'-'", "'%'", "'=='", "'!='", "'='", "'@mixin'", "'@function'", "'@else'", 
		"'@if'", "'@for'", "'@while'", "'@each'", "'@include'", "'@import'", "'@return'", 
		"'!default'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NULL", "NONE", "UNIT_LENGTH", "UNIT_SECOND", "AND", "OR", "INTERPOLATION_START", 
		"BEGIN_PARENTHESIS", "END_PARENTHESIS", "BEGIN_BRACE", "END_BRACE", "BEGIN_BRACKET", 
		"END_BRACKET", "LESSER_EQUAL_THAN", "LESSER_THAN", "GREATER_EQUAL_THAN", 
		"GREATER_THAN", "TILDE", "COLON", "SEMICOLON", "COMMA", "DOT", "DOLLAR", 
		"AT", "AMPERSAND", "HASH", "PLUS", "TIMES", "DIVIDE", "MINUS", "PERCENT", 
		"DOUBLE_EQUAL", "NOT_EQUAL", "EQUAL", "MIXIN", "FUNCTION", "ELSE", "IF", 
		"FOR", "WHILE", "EACH", "INCLUDE", "IMPORT", "RETURN", "POUND_DEFAULT", 
		"IDENTIFIER", "STRING_LITERAL", "NUMBER", "COLOR", "WS", "LINE_COMMENT", 
		"BLOCK_COMMENT", "SPACE", "INTERPOLATION_START_AFTER", "IDENTIFIER_AFTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DSSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DSSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DSSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StylesheetContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StylesheetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stylesheet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterStylesheet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitStylesheet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStylesheet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StylesheetContext stylesheet() {
		StylesheetContext _localctx = new StylesheetContext(Context, State);
		EnterRule(_localctx, 0, RULE_stylesheet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOT) | (1L << HASH) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 22; statement();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public RulesetContext ruleset() {
			return GetRuleContext<RulesetContext>(0);
		}
		public PropertyStatementContext propertyStatement() {
			return GetRuleContext<PropertyStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28; ruleset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; propertyStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetContext : ParserRuleContext {
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RulesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterRuleset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitRuleset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetContext ruleset() {
		RulesetContext _localctx = new RulesetContext(Context, State);
		EnterRule(_localctx, 4, RULE_ruleset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; selector();
			State = 33; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(BEGIN_BRACE);
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOT) | (1L << HASH) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 36; statement();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 42; Match(END_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorPartContext selectorPart() {
			return GetRuleContext<SelectorPartContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 8, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; selectorPart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorPartContext : ParserRuleContext {
		public IdentifierContext COMPONENT;
		public IdentifierContext NAME;
		public IdentifierContext CLASS;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(DSSParser.HASH, 0); }
		public ITerminalNode DOT() { return GetToken(DSSParser.DOT, 0); }
		public SelectorPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterSelectorPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitSelectorPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorPartContext selectorPart() {
		SelectorPartContext _localctx = new SelectorPartContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectorPart);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; _localctx.COMPONENT = identifier();
				}
				break;
			case HASH:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 47; Match(HASH);
				State = 48; _localctx.NAME = identifier();
				}
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 49; Match(DOT);
				State = 50; _localctx.CLASS = identifier();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DSSParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyStatementContext : ParserRuleContext {
		public IdentifierContext PROPERTY_NAME;
		public ExpressionContext EXPRESSION;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterPropertyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitPropertyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyStatementContext propertyStatement() {
		PropertyStatementContext _localctx = new PropertyStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_propertyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; _localctx.PROPERTY_NAME = identifier();
			State = 56; Match(COLON);
			State = 57; _localctx.EXPRESSION = expression(0);
			State = 58; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext LEFT;
		public IToken OP;
		public ExpressionContext RIGHT;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_PARENTHESIS:
				{
				State = 61; Match(BEGIN_PARENTHESIS);
				State = 62; expression(0);
				State = 63; Match(END_PARENTHESIS);
				}
				break;
			case NULL:
			case NONE:
			case NUMBER:
			case COLOR:
				{
				State = 65; literal();
				}
				break;
			case DOLLAR:
				{
				State = 66; variable();
				}
				break;
			case BEGIN_BRACE:
				{
				State = 67; Match(BEGIN_BRACE);
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 68; expression(0);
					}
					}
					State = 71;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << NONE) | (1L << BEGIN_PARENTHESIS) | (1L << BEGIN_BRACE) | (1L << DOLLAR) | (1L << NUMBER) | (1L << COLOR))) != 0) );
				State = 73; Match(END_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 89;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.LEFT = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 77;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 78;
						_localctx.OP = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << DIVIDE) | (1L << PERCENT))) != 0)) ) {
							_localctx.OP = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 79; _localctx.RIGHT = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.LEFT = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 80;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 81;
						_localctx.OP = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.OP = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 82; _localctx.RIGHT = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.LEFT = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 83;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 84;
						_localctx.OP = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESSER_EQUAL_THAN) | (1L << LESSER_THAN) | (1L << GREATER_EQUAL_THAN) | (1L << GREATER_THAN))) != 0)) ) {
							_localctx.OP = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 85; _localctx.RIGHT = expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.LEFT = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 86;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 87;
						_localctx.OP = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DOUBLE_EQUAL || _la==NOT_EQUAL) ) {
							_localctx.OP = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 88; _localctx.RIGHT = expression(5);
						}
						break;
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DSSParser.NUMBER, 0); }
		public ITerminalNode UNIT_LENGTH() { return GetToken(DSSParser.UNIT_LENGTH, 0); }
		public ITerminalNode UNIT_SECOND() { return GetToken(DSSParser.UNIT_SECOND, 0); }
		public ITerminalNode COLOR() { return GetToken(DSSParser.COLOR, 0); }
		public ITerminalNode NULL() { return GetToken(DSSParser.NULL, 0); }
		public ITerminalNode NONE() { return GetToken(DSSParser.NONE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_literal);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; Match(NUMBER);
				State = 96; Match(UNIT_LENGTH);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; Match(NUMBER);
				State = 98; Match(UNIT_SECOND);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 99; Match(COLOR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 100; Match(NULL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 101; Match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(DSSParser.DOLLAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DSSParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDSSParserListener typedListener = listener as IDSSParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(DOLLAR);
			State = 105; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', 'n', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\a', '\x2', '\x1A', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x1D', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '!', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '(', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '+', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x36', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x6', '\n', 'H', '\n', '\n', '\r', '\n', 
		'\xE', '\n', 'I', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'N', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\\', '\n', '\n', '\f', '\n', '\xE', '\n', '_', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'i', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x2', '\x3', '\x12', 
		'\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x6', '\x4', '\x2', '\x1E', '\x1F', '!', '!', '\x4', '\x2', 
		'\x1D', '\x1D', ' ', ' ', '\x3', '\x2', '\x10', '\x13', '\x3', '\x2', 
		'\"', '#', '\x2', 't', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x4', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x6', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\b', '%', '\x3', '\x2', '\x2', '\x2', '\n', '.', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x35', '\x3', '\x2', '\x2', '\x2', '\xE', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x39', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x14', 'h', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'j', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x5', '\x4', 
		'\x3', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', 
		'\x5', '\x6', '\x4', '\x2', '\x1F', '!', '\x5', '\x10', '\t', '\x2', ' ', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '!', '\x5', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x5', '\n', 
		'\x6', '\x2', '#', '$', '\x5', '\b', '\x5', '\x2', '$', '\a', '\x3', '\x2', 
		'\x2', '\x2', '%', ')', '\a', '\f', '\x2', '\x2', '&', '(', '\x5', '\x4', 
		'\x3', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', 
		'\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', 
		'\x3', '\x2', '\x2', '\x2', '*', ',', '\x3', '\x2', '\x2', '\x2', '+', 
		')', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\r', '\x2', '\x2', '-', 
		'\t', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\f', '\a', '\x2', 
		'/', '\v', '\x3', '\x2', '\x2', '\x2', '\x30', '\x36', '\x5', '\xE', '\b', 
		'\x2', '\x31', '\x32', '\a', '\x1C', '\x2', '\x2', '\x32', '\x36', '\x5', 
		'\xE', '\b', '\x2', '\x33', '\x34', '\a', '\x18', '\x2', '\x2', '\x34', 
		'\x36', '\x5', '\xE', '\b', '\x2', '\x35', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x31', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\r', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x30', '\x2', '\x2', '\x38', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x5', '\xE', '\b', '\x2', ':', ';', '\a', '\x15', 
		'\x2', '\x2', ';', '<', '\x5', '\x12', '\n', '\x2', '<', '=', '\a', '\x16', 
		'\x2', '\x2', '=', '\x11', '\x3', '\x2', '\x2', '\x2', '>', '?', '\b', 
		'\n', '\x1', '\x2', '?', '@', '\a', '\n', '\x2', '\x2', '@', '\x41', '\x5', 
		'\x12', '\n', '\x2', '\x41', '\x42', '\a', '\v', '\x2', '\x2', '\x42', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x43', 'N', '\x5', '\x14', '\v', '\x2', 
		'\x44', 'N', '\x5', '\x16', '\f', '\x2', '\x45', 'G', '\a', '\f', '\x2', 
		'\x2', '\x46', 'H', '\x5', '\x12', '\n', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\a', '\r', '\x2', '\x2', 'L', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'M', '>', '\x3', '\x2', '\x2', '\x2', 'M', '\x43', '\x3', 
		'\x2', '\x2', '\x2', 'M', '\x44', '\x3', '\x2', '\x2', '\x2', 'M', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'N', ']', '\x3', '\x2', '\x2', '\x2', 'O', 
		'P', '\f', '\t', '\x2', '\x2', 'P', 'Q', '\t', '\x2', '\x2', '\x2', 'Q', 
		'\\', '\x5', '\x12', '\n', '\n', 'R', 'S', '\f', '\b', '\x2', '\x2', 'S', 
		'T', '\t', '\x3', '\x2', '\x2', 'T', '\\', '\x5', '\x12', '\n', '\t', 
		'U', 'V', '\f', '\a', '\x2', '\x2', 'V', 'W', '\t', '\x4', '\x2', '\x2', 
		'W', '\\', '\x5', '\x12', '\n', '\b', 'X', 'Y', '\f', '\x6', '\x2', '\x2', 
		'Y', 'Z', '\t', '\x5', '\x2', '\x2', 'Z', '\\', '\x5', '\x12', '\n', '\a', 
		'[', 'O', '\x3', '\x2', '\x2', '\x2', '[', 'R', '\x3', '\x2', '\x2', '\x2', 
		'[', 'U', '\x3', '\x2', '\x2', '\x2', '[', 'X', '\x3', '\x2', '\x2', '\x2', 
		'\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', 
		'\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', 'i', '\a', '\x32', 
		'\x2', '\x2', '\x61', '\x62', '\a', '\x32', '\x2', '\x2', '\x62', 'i', 
		'\a', '\x5', '\x2', '\x2', '\x63', '\x64', '\a', '\x32', '\x2', '\x2', 
		'\x64', 'i', '\a', '\x6', '\x2', '\x2', '\x65', 'i', '\a', '\x33', '\x2', 
		'\x2', '\x66', 'i', '\a', '\x3', '\x2', '\x2', 'g', 'i', '\a', '\x4', 
		'\x2', '\x2', 'h', '`', '\x3', '\x2', '\x2', '\x2', 'h', '\x61', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x63', '\x3', '\x2', '\x2', '\x2', 'h', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 
		'g', '\x3', '\x2', '\x2', '\x2', 'i', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\x19', '\x2', '\x2', 'k', 'l', '\a', '\x30', '\x2', '\x2', 
		'l', '\x17', '\x3', '\x2', '\x2', '\x2', '\v', '\x1B', ' ', ')', '\x35', 
		'I', 'M', '[', ']', 'h',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AbsoluteGraphicsPlatform.DSS
