//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Playground/AbsoluteGraphicsPlatform/DSS Parser/Grammar\DSSParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AbsoluteGraphicsPlatform.DSS {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DSSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NULL=1, UNIT=2, AND=3, OR=4, INTERPOLATION_START=5, BEGIN_PARENTHESIS=6, 
		END_PARENTHESIS=7, BEGIN_BRACE=8, END_BRACE=9, BEGIN_BRACKET=10, END_BRACKET=11, 
		LESSER_THAN=12, GREATER_THAN=13, TILDE=14, COLON=15, SEMICOLON=16, COMMA=17, 
		DOT=18, DOLLAR=19, AT=20, AMPERSAND=21, HASH=22, PLUS=23, TIMES=24, DIVIDE=25, 
		MINUS=26, PERCENT=27, DOUBLE_EQUAL=28, NOT_EQUAL=29, EQUAL=30, MIXIN=31, 
		FUNCTION=32, ELSE=33, IF=34, FOR=35, WHILE=36, EACH=37, INCLUDE=38, IMPORT=39, 
		RETURN=40, POUND_DEFAULT=41, IDENTIFIER=42, STRING_LITERAL=43, NUMBER=44, 
		COLOR=45, WS=46, LINE_COMMENT=47, BLOCK_COMMENT=48, SPACE=49, INTERPOLATION_START_AFTER=50, 
		IDENTIFIER_AFTER=51;
	public const int
		RULE_stylesheet = 0, RULE_statement = 1, RULE_ruleset = 2, RULE_block = 3, 
		RULE_selector = 4, RULE_selectorSeparatorType = 5, RULE_selectorPart = 6, 
		RULE_identifier = 7, RULE_propertySetter = 8, RULE_expression = 9, RULE_measurement = 10, 
		RULE_variable = 11;
	public static readonly string[] ruleNames = {
		"stylesheet", "statement", "ruleset", "block", "selector", "selectorSeparatorType", 
		"selectorPart", "identifier", "propertySetter", "expression", "measurement", 
		"variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'null'", null, "'&&'", "'||'", null, "'('", "')'", "'{'", "'}'", 
		"'['", "']'", "'<'", "'>'", "'~'", "':'", "';'", "','", "'.'", "'$'", 
		"'@'", "'&'", "'#'", "'+'", "'*'", "'/'", "'-'", "'%'", "'=='", "'!='", 
		"'='", "'@mixin'", "'@function'", "'@else'", "'@if'", "'@for'", "'@while'", 
		"'@each'", "'@include'", "'@import'", "'@return'", "'!default'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NULL", "UNIT", "AND", "OR", "INTERPOLATION_START", "BEGIN_PARENTHESIS", 
		"END_PARENTHESIS", "BEGIN_BRACE", "END_BRACE", "BEGIN_BRACKET", "END_BRACKET", 
		"LESSER_THAN", "GREATER_THAN", "TILDE", "COLON", "SEMICOLON", "COMMA", 
		"DOT", "DOLLAR", "AT", "AMPERSAND", "HASH", "PLUS", "TIMES", "DIVIDE", 
		"MINUS", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "EQUAL", "MIXIN", "FUNCTION", 
		"ELSE", "IF", "FOR", "WHILE", "EACH", "INCLUDE", "IMPORT", "RETURN", "POUND_DEFAULT", 
		"IDENTIFIER", "STRING_LITERAL", "NUMBER", "COLOR", "WS", "LINE_COMMENT", 
		"BLOCK_COMMENT", "SPACE", "INTERPOLATION_START_AFTER", "IDENTIFIER_AFTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DSSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DSSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DSSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StylesheetContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StylesheetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stylesheet; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStylesheet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StylesheetContext stylesheet() {
		StylesheetContext _localctx = new StylesheetContext(Context, State);
		EnterRule(_localctx, 0, RULE_stylesheet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOT) | (1L << HASH) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 24; statement();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public RulesetContext ruleset() {
			return GetRuleContext<RulesetContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; ruleset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetContext : ParserRuleContext {
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RulesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleset; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetContext ruleset() {
		RulesetContext _localctx = new RulesetContext(Context, State);
		EnterRule(_localctx, 4, RULE_ruleset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; selector();
			State = 33; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_BRACE() { return GetToken(DSSParser.BEGIN_BRACE, 0); }
		public ITerminalNode END_BRACE() { return GetToken(DSSParser.END_BRACE, 0); }
		public PropertySetterContext[] propertySetter() {
			return GetRuleContexts<PropertySetterContext>();
		}
		public PropertySetterContext propertySetter(int i) {
			return GetRuleContext<PropertySetterContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(DSSParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(DSSParser.SEMICOLON, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(BEGIN_BRACE);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOT) | (1L << HASH) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 40;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 36; propertySetter();
					State = 37; Match(SEMICOLON);
					}
					break;
				case 2:
					{
					State = 39; statement();
					}
					break;
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 45; Match(END_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorPartContext selectorPart() {
			return GetRuleContext<SelectorPartContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 8, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; selectorPart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorSeparatorTypeContext : ParserRuleContext {
		public ITerminalNode GREATER_THAN() { return GetToken(DSSParser.GREATER_THAN, 0); }
		public SelectorSeparatorTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorSeparatorType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorSeparatorType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorSeparatorTypeContext selectorSeparatorType() {
		SelectorSeparatorTypeContext _localctx = new SelectorSeparatorTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectorSeparatorType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorPartContext : ParserRuleContext {
		public IdentifierContext COMPONENT;
		public IdentifierContext NAME;
		public IdentifierContext CLASS;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(DSSParser.HASH, 0); }
		public ITerminalNode DOT() { return GetToken(DSSParser.DOT, 0); }
		public SelectorPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorPart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorPartContext selectorPart() {
		SelectorPartContext _localctx = new SelectorPartContext(Context, State);
		EnterRule(_localctx, 12, RULE_selectorPart);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; _localctx.COMPONENT = identifier();
				}
				break;
			case HASH:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 52; Match(HASH);
				State = 53; _localctx.NAME = identifier();
				}
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 54; Match(DOT);
				State = 55; _localctx.CLASS = identifier();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DSSParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetterContext : ParserRuleContext {
		public IdentifierContext PROPERTY_NAME;
		public ExpressionContext EXPRESSION;
		public ITerminalNode COLON() { return GetToken(DSSParser.COLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertySetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetterContext propertySetter() {
		PropertySetterContext _localctx = new PropertySetterContext(Context, State);
		EnterRule(_localctx, 16, RULE_propertySetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; _localctx.PROPERTY_NAME = identifier();
			State = 61; Match(COLON);
			State = 62; _localctx.EXPRESSION = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public MeasurementContext measurement() {
			return GetRuleContext<MeasurementContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(DSSParser.NULL, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; measurement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; identifier();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 66; Match(NULL);
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 67; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasurementContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DSSParser.NUMBER, 0); }
		public ITerminalNode UNIT() { return GetToken(DSSParser.UNIT, 0); }
		public MeasurementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measurement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasurement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasurementContext measurement() {
		MeasurementContext _localctx = new MeasurementContext(Context, State);
		EnterRule(_localctx, 20, RULE_measurement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(NUMBER);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIT) {
				{
				State = 71; Match(UNIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(DSSParser.DOLLAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DSSParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSSParserVisitor<TResult> typedVisitor = visitor as IDSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(DOLLAR);
			State = 75; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', 'P', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\a', 
		'\x2', '\x1C', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1F', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '+', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '.', '\v', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', ';', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', 'G', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', 'K', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x2', '\x2', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x2', '\x2', '\x2', 'L', '\x2', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x4', ' ', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\b', '%', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x31', '\x3', '\x2', '\x2', '\x2', '\f', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xE', ':', '\x3', '\x2', '\x2', '\x2', '\x10', '<', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '>', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x16', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x18', 'L', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x5', 
		'\x4', '\x3', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', ' ', 
		'!', '\x5', '\x6', '\x4', '\x2', '!', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\x5', '\n', '\x6', '\x2', '#', '$', '\x5', '\b', '\x5', '\x2', 
		'$', '\a', '\x3', '\x2', '\x2', '\x2', '%', ',', '\a', '\n', '\x2', '\x2', 
		'&', '\'', '\x5', '\x12', '\n', '\x2', '\'', '(', '\a', '\x12', '\x2', 
		'\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x5', '\x4', '\x3', 
		'\x2', '*', '&', '\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', 
		'\x2', '+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\v', 
		'\x2', '\x2', '\x30', '\t', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x5', '\xE', '\b', '\x2', '\x32', '\v', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\xF', '\x2', '\x2', '\x34', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x35', ';', '\x5', '\x10', '\t', '\x2', '\x36', '\x37', '\a', 
		'\x18', '\x2', '\x2', '\x37', ';', '\x5', '\x10', '\t', '\x2', '\x38', 
		'\x39', '\a', '\x14', '\x2', '\x2', '\x39', ';', '\x5', '\x10', '\t', 
		'\x2', ':', '\x35', '\x3', '\x2', '\x2', '\x2', ':', '\x36', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\a', ',', '\x2', '\x2', '=', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x5', '\x10', '\t', '\x2', '?', '@', '\a', 
		'\x11', '\x2', '\x2', '@', '\x41', '\x5', '\x14', '\v', '\x2', '\x41', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x42', 'G', '\x5', '\x16', '\f', 
		'\x2', '\x43', 'G', '\x5', '\x10', '\t', '\x2', '\x44', 'G', '\a', '\x3', 
		'\x2', '\x2', '\x45', 'G', '\x5', '\x18', '\r', '\x2', '\x46', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x15', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\a', 
		'.', '\x2', '\x2', 'I', 'K', '\a', '\x4', '\x2', '\x2', 'J', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\x17', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x15', '\x2', '\x2', 'M', 
		'N', '\a', ',', '\x2', '\x2', 'N', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x1D', '*', ',', ':', '\x46', 'J',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AbsoluteGraphicsPlatform.DSS
